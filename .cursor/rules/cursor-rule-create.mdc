---
description: Cursorルールの配置と保守標準
globs: *.mdc
alwaysApply: false
---
# Cursor Rules Location（カーソルルールの配置）

リポジトリ内でCursorルールファイルを配置・整理するための標準を定め、常に最新かつベストプラクティスに沿った状態を維持します。

## 適用範囲
- 対象: `.mdc` ファイル全般（この文書自体はガイドです）
- タイミング: ルールファイルの作成・変更時の運用ガイド

## ルール（配置の強制方針）
- ルールファイルは必ず `PROJECT_ROOT/.cursor/rules/` に配置すること。
- 次のパターンに一致するパスは「不正な配置」とみなす。

```
^(?!\.?/?\.cursor/rules/.*\.mdc$)
```

違反時に提示すべきメッセージ（推奨）:

```
Cursorルールファイル (.mdc) は必ず .cursor/rules ディレクトリ内に配置してください
```

## ガイダンス（ベストプラクティス）
1. 配置場所と構成
   - 配置場所: ルールファイルは常に `PROJECT_ROOT/.cursor/rules/` に配置すること
   - ディレクトリ構成例:

   ```
   PROJECT_ROOT/
   ├── .cursor/
   │   └── rules/
   │       ├── your-rule-name.mdc
   │       └── ...
   └── ...
   ```

2. ファイル命名規則
   - ファイル名は kebab-case（例: `php-drupal-standards.mdc`）を使用する
   - 拡張子は必ず `.mdc`
   - ルールの目的を明確に表す名前をつける
   - 関連するルールは共通プレフィックスでグループ化（例: `drupal-*`, `lagoon-*`）

3. ルールファイルの構造（テンプレート）

```
---
description: ルールの簡潔な説明
globs: *.php, *.module, *.inc
alwaysApply: false
---
# ルールタイトル

（ここにルールの背景・方針・適用例・検出基準などをMarkdownで記述）
```

4. 保守運用
   - 新しいルールを追加する際: 既存ルールとの重複・競合の確認、パターンの具体化、サンプルでの動作確認
   - 既存ルールを変更する際: バージョン更新、コミットメッセージで変更点明記、関連ルールの整合性確認、後方互換性の配慮

5. ルール内容のベストプラクティス
   - 明確で具体的な正規表現パターンを使う
   - 行動可能なメッセージを提示する（改善方法を明記）
   - 良い例と悪い例を併記する
   - 適切な優先度（priority）を設定する
   - 条件が複雑な場合は複数の小さな条件に分割する
   - 複雑なパターンのパフォーマンス影響も考慮する

6. テスト
   - 適合・非適合の両方で検証する
   - メッセージの明確さと有用性を確認する
   - 誤検知（false positive）・見逃し（false negative）を抑制する
   - ルール同士の競合がないことを確認する

## 例

### 例1: 配置場所の良い/悪い

悪い例（誤った場所）:

```
rules/my-rule.mdc
my-rule.mdc
.rules/my-rule.mdc
```

良い例（正しい場所）:

```
.cursor/rules/my-rule.mdc
```

期待される結果:

```
正しい場所に配置されたCursorルールファイル
```

### 例2: 構造の良い/悪い

悪い例（構造が不十分）:

```
# なんとなくの説明だけが書かれている
内容に一貫性や適用範囲、検出基準の記述がない
```

良い例（適切に構造化）:

```
---
description: PHPコードのエラーハンドリングに関するガイド
globs: *.php
alwaysApply: false
---
# PHPのエラーハンドリング指針

## 方針
空の catch ブロックは避け、最低限エラーログを記録する。

## 検出基準（正規表現例）
try\s*{[^}]*}\s*catch\s*\(\s*\S+\s*\)\s*{\s*}

## 改善メッセージ（例）
空のcatchブロックには、少なくともエラーログを含めてください。

## 参考
プロジェクト標準のロギングユーティリティを使用すること。
```