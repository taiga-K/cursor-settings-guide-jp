---
alwaysApply: false
description: "Testing guidelines and best practices for React applications"
---

# 🧪 Testing Guidelines

テストの効果は、統合テストとエンドツーエンド（E2E）テストによって提供される包括的なカバレッジに起因します。単体テストは個別のコンポーネントを分離して検証する目的がありますが、アプリケーション機能に対する真の価値と信頼性は、堅牢な統合テストとE2Eテスト戦略から生まれます。

## テストの種類

### Unit Tests（単体テスト）

単体テストは、作成できる最小のテストです。アプリケーションの個々の部分を分離してテストします。アプリケーション全体で使用される共有コンポーネントや関数をテストするのに有用です。また、単一のコンポーネントの複雑なロジックをテストするのにも役立ちます。

#### 特徴
- 実行が高速
- 作成が簡単
- 個別の機能の検証に適している

#### 適用場面
- 共有コンポーネントのテスト
- ユーティリティ関数のテスト
- 複雑なビジネスロジックの検証
- 純粋関数のテスト

### Integration Tests（統合テスト）

統合テストは、アプリケーションの異なる部分がどのように連携するかを確認します。アプリケーションの信頼性に対する重要な利益と信頼を提供するため、テストの大部分を統合テストに焦点を当てることが重要です。

#### 重要性
- 単体テストが合格してもアプリケーションが正常に機能することを保証しない
- 部分間の接続に欠陥がある場合の問題を検出
- アプリケーションの全体的な動作を確認
- 実際のユーザー操作に近いテスト環境を提供

#### ベストプラクティス
- 機能レベルでのテストを実行
- コンポーネント間の相互作用を検証
- 実際のユーザーワークフローをシミュレート
- データフローとステート管理の検証

### E2E（エンドツーエンドテスト）

エンドツーエンドテストは、アプリケーション全体を評価する手法です。これらのテストでは、フロントエンドとバックエンドの両方を含む完全なアプリケーションを自動化し、システム全体が正しく機能することを確認します。

#### 特徴
- 実際のユーザーとアプリケーションの相互作用をシミュレート
- システム全体の動作を検証
- 本番環境に最も近い条件でのテスト
- 最も高い信頼性を提供

#### 実行モード
- **ブラウザモード**: 開発時に視覚的なフィードバックを提供
- **ヘッドレスモード**: CI/CDパイプラインでの自動実行に適している

## 推奨ツール

### Vitest

Jestに似た機能を持つ強力なテストフレームワークですが、より最新で現代的なツールとの相性が良いです。高度にカスタマイズ可能で柔軟性があり、JavaScriptコードのテストにおいて人気のある選択肢です。

#### 特徴
- 高速な実行
- ホットリロード対応
- 現代的なESモジュールサポート
- TypeScript標準サポート
- 豊富なマッチャーとアサーション

### Testing Library

Testing Libraryは、これまで以上にテストを簡単にするライブラリとツールのセットです。実装の詳細をテストするのではなく、実際のユーザーがアプリを使用する方法でテストするという哲学を持っています。

#### 哲学
- 実装詳細ではなく、ユーザー体験を重視
- コンポーネントの内部状態ではなく、画面に表示される内容をテスト
- リファクタリング時にテストが継続して有効であることを保証

#### 利点
- より現実的なテスト環境
- 実装変更に対する耐性
- ユーザー中心のテストアプローチ
- アクセシビリティの向上

### Playwright

Playwrightは、E2Eテストを自動化された方法で実行するためのツールです。実際のユーザーがアプリを使用する際に実行するすべてのコマンドを定義し、テストを開始します。

#### 実行モード
- **ブラウザモード**: 専用ブラウザを開き、各ステップでアプリケーションを可視化・検査する豊富なツールを提供
- **ヘッドレスモード**: ヘッドレスブラウザを開始してアプリケーションを実行、CI/CDとの統合に有用

#### 特徴
- 複数ブラウザサポート（Chrome、Firefox、Safari）
- 並列実行
- スクリーンショット・ビデオ録画
- 自動待機とリトライ機能

### MSW（Mock Service Worker）

MSWは、API のプロトタイピングに使用する優れたツールで、サーバーを気にすることなく迅速にフロントエンドを作成できます。実際のバックエンドではなく、HTTP リクエストをインターセプトし、定義したハンドラーに基づいて希望するレスポンスを返すサービスワーカー内のモックサーバーです。

#### 用途
- フロントエンド開発の独立性確保
- APIエンドポイントの設計
- バックエンド機能の完成を待たずに開発継続
- テスト時のAPIモック

#### 利点
- 実際のHTTP呼び出しを使用
- レスポンスデータのハードコーディング回避
- 完全に機能するモックAPIサーバー
- テスト時のfetchモック不要

## テスト戦略とベストプラクティス

### テストピラミッド

1. **E2Eテスト（少数）**: 重要なユーザージャーニー
2. **統合テスト（中程度）**: 機能レベルのテスト
3. **単体テスト（多数）**: 個別ロジックのテスト

### 実装ガイドライン

#### テスト作成の原則
- ユーザーの視点でテストを設計
- 実装詳細ではなく動作をテスト
- 明確で保守しやすいテストコードを記述
- テストの意図を明確にするテスト名を使用

#### カバレッジ目標
- 重要なビジネスロジックの100%カバレッジ
- エラーハンドリングパスのテスト
- エッジケースの考慮
- ユーザーインタラクションの包括的なテスト

### CI/CD統合

#### 自動化戦略
- プルリクエスト時の自動テスト実行
- 段階的なテスト実行（単体 → 統合 → E2E）
- テスト失敗時のデプロイメント停止
- テスト結果の可視化とレポート

## アンチパターン

### 避けるべき実践
- 実装詳細への過度な依存
- 脆弱なセレクターの使用
- テストのためのテスト作成
- 過度に複雑なテストセットアップ
- テストコードの重複

### 一般的な間違い
- 単体テストのみに頼る
- E2Eテストの過度な使用
- 適切でないモックの使用
- テストデータの管理不備
- 非同期処理の不適切な処理

## 保守とスケーラビリティ

### 長期的な考慮事項
- テストスイートの実行時間管理
- テストコードの品質維持
- テストデータの一貫性
- 新機能開発時のテスト戦略
- レガシーコードのテストカバレッジ向上